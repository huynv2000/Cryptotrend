'use client';

import { useState, useEffect } from 'react';
import { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ComposedChart, AreaChart, Area } from 'recharts';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import Link from 'next/link';

interface VolumeData {
  date: string;
  volume: number;
  price: number;
  movingAverage: number;
  volumeChange: number;
}

interface VolumeMetrics {
  totalVolume: number;
  avgVolume: number;
  maxVolume: number;
  minVolume: number;
  volumeTrend: string;
  volumeSignal: string;
}

export default function VolumeAnalysis() {
  const [volumeData, setVolumeData] = useState<VolumeData[]>([]);
  const [metrics, setMetrics] = useState<VolumeMetrics | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Fetch real volume data from API instead of generating mock data
    const fetchVolumeData = async () => {
      try {
        setLoading(true);
        // For now, set empty data to avoid showing mock data
        // In production, this would fetch real volume data from the database
        setVolumeData([]);
        setMetrics(null);
      } catch (error) {
        console.error('Error fetching volume data:', error);
        setVolumeData([]);
        setMetrics(null);
      } finally {
        setLoading(false);
      }
    };

    fetchVolumeData();
  }, []);

  const getSignalColor = (signal: string) => {
    switch (signal) {
      case 'Cao': return 'bg-green-500 text-white';
      case 'Th·∫•p': return 'bg-red-500 text-white';
      case 'Trung b√¨nh': return 'bg-yellow-500 text-white';
      default: return 'bg-gray-500 text-white';
    }
  };

  const getTrendColor = (trend: string) => {
    return trend === 'TƒÉng' ? 'text-green-600' : 'text-red-600';
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">ƒêang t·∫£i d·ªØ li·ªáu kh·ªëi l∆∞·ª£ng...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="container mx-auto px-4 py-6">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">
                Volume Analysis
              </h1>
              <p className="text-gray-600 mt-1">
                Ph√¢n t√≠ch kh·ªëi l∆∞·ª£ng giao d·ªãch chuy√™n s√¢u
              </p>
            </div>
            <div className="mt-4 md:mt-0">
              <Link href="/">
                <Button variant="outline">‚Üê Quay l·∫°i Dashboard</Button>
              </Link>
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-6">
        {/* Key Metrics */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">T·ªïng kh·ªëi l∆∞·ª£ng</CardTitle>
              <div className="h-4 w-4 text-muted-foreground">üìä</div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                ${(metrics?.totalVolume ? metrics.totalVolume / 1000000000 : 0).toFixed(2)}B
              </div>
              <p className="text-xs text-muted-foreground">
                90 ng√†y g·∫ßn nh·∫•t
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Kh·ªëi l∆∞·ª£ng TB</CardTitle>
              <div className="h-4 w-4 text-muted-foreground">üìà</div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                ${(metrics?.avgVolume ? metrics.avgVolume / 1000000000 : 0).toFixed(2)}B
              </div>
              <p className="text-xs text-muted-foreground">
                Trung b√¨nh 90 ng√†y
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Xu h∆∞·ªõng</CardTitle>
              <div className="h-4 w-4 text-muted-foreground">üìâ</div>
            </CardHeader>
            <CardContent>
              <div className={`text-2xl font-bold ${getTrendColor(metrics?.volumeTrend || '')}`}>
                {metrics?.volumeTrend}
              </div>
              <p className="text-xs text-muted-foreground">
                45 ng√†y g·∫ßn nh·∫•t
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">T√≠n hi·ªáu</CardTitle>
              <div className="h-4 w-4 text-muted-foreground">üö®</div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                <Badge className={getSignalColor(metrics?.volumeSignal || '')}>
                  {metrics?.volumeSignal}
                </Badge>
              </div>
              <p className="text-xs text-muted-foreground">
                So v·ªõi trung b√¨nh
              </p>
            </CardContent>
          </Card>
        </div>

        {/* Main Volume Chart */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle>Bi·ªÉu ƒë·ªì kh·ªëi l∆∞·ª£ng giao d·ªãch 90 ng√†y</CardTitle>
            <CardDescription>
              Ph√¢n t√≠ch kh·ªëi l∆∞·ª£ng giao d·ªãch v·ªõi ƒë∆∞·ªùng trung b√¨nh ƒë·ªông 30 ng√†y
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="h-[500px] w-full">
              <ResponsiveContainer width="100%" height="100%">
                <ComposedChart data={volumeData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
                  <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                  <XAxis 
                    dataKey="date" 
                    tick={{ fontSize: 12, fill: '#666' }}
                    interval={Math.floor(volumeData.length / 8)}
                  />
                  <YAxis 
                    yAxisId="left" 
                    orientation="left" 
                    stroke="#666"
                    domain={[0, 1200000000]}
                    tickFormatter={(value) => `$${(value / 1000000000).toFixed(1)}B`}
                    tick={{ fill: '#666' }}
                  />
                  <YAxis 
                    yAxisId="right" 
                    orientation="right" 
                    stroke="#666"
                    domain={[0, 60000]}
                    tickFormatter={(value) => `$${(value / 1000).toFixed(0)}K`}
                    tick={{ fill: '#666' }}
                  />
                  <Tooltip 
                    formatter={(value, name) => {
                      if (name === 'volume') {
                        return [`$${(Number(value) / 1000000000).toFixed(2)}B`, 'Kh·ªëi l∆∞·ª£ng'];
                      } else if (name === 'price') {
                        return [`$${Number(value).toLocaleString()}`, 'Gi√°'];
                      } else if (name === 'movingAverage') {
                        return [`$${Number(value).toLocaleString()}`, 'MA 30 ng√†y'];
                      }
                      return [String(value), String(name)];
                    }}
                    labelFormatter={(label) => `Ng√†y: ${label}`}
                    contentStyle={{
                      backgroundColor: '#fff',
                      border: '1px solid #e5e7eb',
                      borderRadius: '6px',
                      boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
                    }}
                  />
                  <Legend />
                  <Bar 
                    yAxisId="left" 
                    dataKey="volume" 
                    name="Kh·ªëi l∆∞·ª£ng" 
                    fill="#3b82f6" 
                    opacity={0.7}
                  />
                  <Line 
                    yAxisId="right" 
                    type="monotone" 
                    dataKey="price" 
                    name="Gi√°" 
                    stroke="#10b981" 
                    strokeWidth={2}
                    dot={false}
                  />
                  <Line 
                    yAxisId="right" 
                    type="monotone" 
                    dataKey="movingAverage" 
                    name="MA 30 ng√†y" 
                    stroke="#f97316" 
                    strokeWidth={2}
                    strokeDasharray="5 5"
                    dot={false}
                  />
                </ComposedChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        {/* Volume Change Chart */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
          <Card>
            <CardHeader>
              <CardTitle>Bi·ªÉu ƒë·ªì thay ƒë·ªïi kh·ªëi l∆∞·ª£ng</CardTitle>
              <CardDescription>
                T·ª∑ l·ªá thay ƒë·ªïi kh·ªëi l∆∞·ª£ng giao d·ªãch h√†ng ng√†y (%)
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[300px] w-full">
                <ResponsiveContainer width="100%" height="100%">
                  <AreaChart data={volumeData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
                    <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                    <XAxis 
                      dataKey="date" 
                      tick={{ fontSize: 12, fill: '#666' }}
                      interval={Math.floor(volumeData.length / 6)}
                    />
                    <YAxis 
                      stroke="#666"
                      tickFormatter={(value) => `${value}%`}
                      tick={{ fill: '#666' }}
                    />
                    <Tooltip 
                      formatter={(value) => [`${value}%`, 'Thay ƒë·ªïi kh·ªëi l∆∞·ª£ng']}
                      labelFormatter={(label) => `Ng√†y: ${label}`}
                      contentStyle={{
                        backgroundColor: '#fff',
                        border: '1px solid #e5e7eb',
                        borderRadius: '6px',
                        boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
                      }}
                    />
                    <Area 
                      type="monotone" 
                      dataKey="volumeChange" 
                      stroke="#8b5cf6" 
                      fill="#8b5cf6" 
                      fillOpacity={0.3}
                    />
                  </AreaChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Th·ªëng k√™ kh·ªëi l∆∞·ª£ng</CardTitle>
              <CardDescription>
                C√°c ch·ªâ s·ªë quan tr·ªçng v·ªÅ kh·ªëi l∆∞·ª£ng giao d·ªãch
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex justify-between items-center py-2 border-b border-gray-100">
                  <span className="text-gray-600">Kh·ªëi l∆∞·ª£ng t·ªëi ƒëa</span>
                  <span className="font-medium">
                    ${(metrics?.maxVolume ? metrics.maxVolume / 1000000000 : 0).toFixed(2)}B
                  </span>
                </div>
                <div className="flex justify-between items-center py-2 border-b border-gray-100">
                  <span className="text-gray-600">Kh·ªëi l∆∞·ª£ng t·ªëi thi·ªÉu</span>
                  <span className="font-medium">
                    ${(metrics?.minVolume ? metrics.minVolume / 1000000000 : 0).toFixed(2)}B
                  </span>
                </div>
                <div className="flex justify-between items-center py-2 border-b border-gray-100">
                  <span className="text-gray-600">Kh·ªëi l∆∞·ª£ng trung b√¨nh</span>
                  <span className="font-medium">
                    ${(metrics?.avgVolume ? metrics.avgVolume / 1000000000 : 0).toFixed(2)}B
                  </span>
                </div>
                <div className="flex justify-between items-center py-2 border-b border-gray-100">
                  <span className="text-gray-600">T·ªïng kh·ªëi l∆∞·ª£ng</span>
                  <span className="font-medium">
                    ${(metrics?.totalVolume ? metrics.totalVolume / 1000000000 : 0).toFixed(2)}B
                  </span>
                </div>
                <div className="flex justify-between items-center py-2">
                  <span className="text-gray-600">Xu h∆∞·ªõng kh·ªëi l∆∞·ª£ng</span>
                  <Badge className={metrics?.volumeTrend === 'TƒÉng' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'}>
                    {metrics?.volumeTrend}
                  </Badge>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Volume Analysis Summary */}
        <Card>
          <CardHeader>
            <CardTitle>üìä T·ªïng quan ph√¢n t√≠ch kh·ªëi l∆∞·ª£ng</CardTitle>
            <CardDescription>
              Nh·∫≠n ƒë·ªãnh v·ªÅ kh·ªëi l∆∞·ª£ng giao d·ªãch v√† t√°c ƒë·ªông ƒë·∫øn gi√°
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div>
                <h4 className="font-semibold text-gray-900 mb-3">Ph√¢n t√≠ch k·ªπ thu·∫≠t</h4>
                <div className="space-y-2 text-sm text-gray-700">
                  <p>‚Ä¢ Kh·ªëi l∆∞·ª£ng giao d·ªãch trung b√¨nh duy tr√¨ ·ªü m·ª©c ${(metrics?.avgVolume ? metrics.avgVolume / 1000000000 : 0).toFixed(2)}B</p>
                  <p>‚Ä¢ Xu h∆∞·ªõng kh·ªëi l∆∞·ª£ng {metrics?.volumeTrend.toLowerCase()} trong 45 ng√†y g·∫ßn nh·∫•t</p>
                  <p>‚Ä¢ Kh·ªëi l∆∞·ª£ng hi·ªán t·∫°i ƒë∆∞·ª£c ƒë√°nh gi√° l√† {metrics?.volumeSignal.toLowerCase()} so v·ªõi trung b√¨nh</p>
                  <p>‚Ä¢ Bi·∫øn ƒë·ªông kh·ªëi l∆∞·ª£ng t·ª´ ${(metrics?.minVolume ? metrics.minVolume / 1000000000 : 0).toFixed(2)}B ƒë·∫øn ${(metrics?.maxVolume ? metrics.maxVolume / 1000000000 : 0).toFixed(2)}B</p>
                </div>
              </div>
              
              <div>
                <h4 className="font-semibold text-gray-900 mb-3">Nh·∫≠n ƒë·ªãnh th·ªã tr∆∞·ªùng</h4>
                <div className="space-y-2 text-sm text-gray-700">
                  <p>‚Ä¢ Kh·ªëi l∆∞·ª£ng giao d·ªãch l√† ch·ªâ s·ªë quan tr·ªçng ƒë·ªÉ x√°c nh·∫≠n xu h∆∞·ªõng gi√°</p>
                  <p>‚Ä¢ Kh·ªëi l∆∞·ª£ng tƒÉng th∆∞·ªùng ƒëi k√®m v·ªõi s·ª± x√°c nh·∫≠n c·ªßa xu h∆∞·ªõng tƒÉng gi√°</p>
                  <p>‚Ä¢ Kh·ªëi l∆∞·ª£ng gi·∫£m c√≥ th·ªÉ b√°o hi·ªáu s·ª± suy y·∫øu c·ªßa xu h∆∞·ªõng hi·ªán t·∫°i</p>
                  <p>‚Ä¢ C·∫ßn k·∫øt h·ª£p v·ªõi c√°c ch·ªâ s·ªë kh√°c ƒë·ªÉ c√≥ c√°i nh√¨n to√†n di·ªán</p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}