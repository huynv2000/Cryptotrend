import { NextRequest, NextResponse } from 'next/server'
import { volumeService } from '@/lib/volume-service'

/**
 * API Route x·ª≠ l√Ω d·ªØ li·ªáu kh·ªëi l∆∞·ª£ng giao d·ªãch
 * 
 * Endpoint n√†y cung c·∫•p:
 * - L·∫•y d·ªØ li·ªáu kh·ªëi l∆∞·ª£ng l·ªãch s·ª≠ cho m·ªôt ti·ªÅn ƒëi·ªán t·ª≠ c·ª• th·ªÉ
 * - Ph√¢n t√≠ch kh·ªëi l∆∞·ª£ng v·ªõi ƒë∆∞·ªùng trung b√¨nh ƒë·ªông 30 ng√†y
 * - C·∫≠p nh·∫≠t d·ªØ li·ªáu kh·ªëi l∆∞·ª£ng theo y√™u c·∫ßu
 * 
 * Query parameters:
 * - cryptoId: ID c·ªßa ti·ªÅn ƒëi·ªán t·ª≠ (b·∫Øt bu·ªôc)
 * - days: S·ªë ng√†y d·ªØ li·ªáu (m·∫∑c ƒë·ªãnh: 90)
 * - action: Lo·∫°i h√†nh ƒë·ªông ('history' ho·∫∑c 'analysis')
 * 
 * @author Crypto Analytics Team
 * @version 2.0
 */

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const cryptoId = searchParams.get('cryptoId')
    const days = searchParams.get('days') ? parseInt(searchParams.get('days')!) : 90
    const action = searchParams.get('action') || 'history'

    if (!cryptoId) {
      return NextResponse.json(
        { error: 'Thi·∫øu tham s·ªë cryptoId' },
        { status: 400 }
      )
    }

    console.log(`üìä ƒêang l·∫•y d·ªØ li·ªáu kh·ªëi l∆∞·ª£ng cho ${cryptoId} (${days} ng√†y, h√†nh ƒë·ªông: ${action})`)

    if (action === 'analysis') {
      const analysis = await volumeService.getVolumeAnalysis(cryptoId)
      return NextResponse.json(analysis)
    } else {
      const history = await volumeService.getVolumeHistory(cryptoId, days)
      return NextResponse.json({ history })
    }

  } catch (error) {
    console.error('L·ªói trong API volume:', error)
    return NextResponse.json(
      { 
        error: 'L·ªói m√°y ch·ªß n·ªôi b·ªô', 
        chi_tiet: error instanceof Error ? error.message : String(error) 
      },
      { status: 500 }
    )
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { cryptoId, action } = body

    if (!cryptoId) {
      return NextResponse.json(
        { error: 'cryptoId l√† b·∫Øt bu·ªôc' },
        { status: 400 }
      )
    }

    if (action === 'update') {
      console.log(`üîÑ ƒêang c·∫≠p nh·∫≠t d·ªØ li·ªáu kh·ªëi l∆∞·ª£ng cho ${cryptoId}`)
      await volumeService.getVolumeAnalysis(cryptoId)
      return NextResponse.json({ message: 'C·∫≠p nh·∫≠t d·ªØ li·ªáu kh·ªëi l∆∞·ª£ng th√†nh c√¥ng' })
    }

    return NextResponse.json({ error: 'H√†nh ƒë·ªông kh√¥ng x√°c ƒë·ªãnh' }, { status: 400 })

  } catch (error) {
    console.error('L·ªói trong API volume POST:', error)
    return NextResponse.json(
      { 
        error: 'L·ªói m√°y ch·ªß n·ªôi b·ªô', 
        chi_tiet: error instanceof Error ? error.message : String(error) 
      },
      { status: 500 }
    )
  }
}