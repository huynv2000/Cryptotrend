// Advanced TVL Metrics Section Component
// Displays TVL Velocity and TVL Efficiency metrics

'use client';

import { useState } from 'react';
import { 
  TrendingUp, 
  TrendingDown, 
  Zap, 
  DollarSign, 
  Percent, 
  Activity, 
  Target,
  BarChart3,
  PieChart,
  RefreshCw,
  AlertTriangle,
  CheckCircle,
  Clock
} from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { LoadingState } from '@/components/LoadingState';
import { cn, formatNumber, formatCurrency, formatPercentage } from '@/lib/utils';
import type { BlockchainValue, TimeframeValue } from '@/lib/types';

interface AdvancedTVLMetricsData {
  tvlVelocity: {
    velocity: number | null;
    volumeToTVLRatio: number | null;
    turnoverRate: number | null;
    avgHoldingPeriod: number | null;
    liquidityEfficiency: number | null;
  };
  tvlEfficiency: {
    feeToTVLRatio: number | null;
    revenueToTVLRatio: number | null;
    roi: number | null;
    capitalEfficiency: number | null;
    protocolYield: number | null;
    economicOutput: number | null;
  };
  combinedScore: number | null;
  marketHealth: string | null;
  recommendations: string[];
  lastUpdated: string;
  is_outdated: boolean;
  confidence: number;
  source: string;
}

interface AdvancedTVLMetricsSectionProps {
  blockchain: BlockchainValue;
  timeframe: TimeframeValue;
  data: AdvancedTVLMetricsData | null;
  isLoading: boolean;
  onRefresh?: () => void;
}

const velocityMetricsConfig = [
  {
    key: 'velocity',
    title: 'TVL Velocity',
    description: 'How quickly TVL circulates in the ecosystem',
    icon: Zap,
    color: 'text-blue-500',
    format: 'number',
    unit: 'x',
    tooltip: 'Higher velocity indicates more active capital utilization'
  },
  {
    key: 'volumeToTVLRatio',
    title: 'Volume/TVL Ratio',
    description: 'Trading volume relative to TVL',
    icon: Activity,
    color: 'text-green-500',
    format: 'ratio',
    unit: '',
    tooltip: 'Shows how much trading activity per unit of TVL'
  },
  {
    key: 'turnoverRate',
    title: 'Turnover Rate',
    description: 'Daily TVL turnover percentage',
    icon: RefreshCw,
    color: 'text-purple-500',
    format: 'percentage',
    unit: '',
    tooltip: 'Percentage of TVL that turns over daily'
  },
  {
    key: 'avgHoldingPeriod',
    title: 'Avg Holding Period',
    description: 'Average time capital is locked',
    icon: Clock,
    color: 'text-orange-500',
    format: 'days',
    unit: ' days',
    tooltip: 'Lower values indicate more active trading'
  },
  {
    key: 'liquidityEfficiency',
    title: 'Liquidity Efficiency',
    description: 'Efficiency of capital utilization',
    icon: Target,
    color: 'text-red-500',
    format: 'score',
    unit: '/100',
    tooltip: 'Score from 0-100, higher is better'
  }
];

const efficiencyMetricsConfig = [
  {
    key: 'feeToTVLRatio',
    title: 'Fee/TVL Ratio',
    description: 'Protocol fees relative to TVL',
    icon: DollarSign,
    color: 'text-green-500',
    format: 'percentage',
    unit: '',
    tooltip: 'Annual fee generation as percentage of TVL'
  },
  {
    key: 'revenueToTVLRatio',
    title: 'Revenue/TVL Ratio',
    description: 'Protocol revenue relative to TVL',
    icon: TrendingUp,
    color: 'text-blue-500',
    format: 'percentage',
    unit: '',
    tooltip: 'Annual revenue as percentage of TVL'
  },
  {
    key: 'roi',
    title: 'Return on Investment',
    description: 'Annual ROI from protocol revenue',
    icon: Percent,
    color: 'text-purple-500',
    format: 'percentage',
    unit: '',
    tooltip: 'Expected annual return based on revenue'
  },
  {
    key: 'capitalEfficiency',
    title: 'Capital Efficiency',
    description: 'Efficiency of capital deployment',
    icon: BarChart3,
    color: 'text-orange-500',
    format: 'score',
    unit: '/100',
    tooltip: 'Score from 0-100, higher is more efficient'
  },
  {
    key: 'protocolYield',
    title: 'Protocol Yield',
    description: 'Average yield from protocols',
    icon: PieChart,
    color: 'text-red-500',
    format: 'percentage',
    unit: '',
    tooltip: 'Average annual yield across all protocols'
  },
  {
    key: 'economicOutput',
    title: 'Economic Output',
    description: 'Total annual economic output',
    icon: Activity,
    color: 'text-cyan-500',
    format: 'currency',
    unit: '',
    tooltip: 'Total annual revenue generated by the ecosystem'
  }
];

export default function AdvancedTVLMetricsSection({
  blockchain,
  timeframe,
  data,
  isLoading,
  onRefresh
}: AdvancedTVLMetricsSectionProps) {
  const [selectedTab, setSelectedTab] = useState('overview');
  const [isRefreshing, setIsRefreshing] = useState(false);

  const handleRefresh = async () => {
    setIsRefreshing(true);
    if (onRefresh) {
      await onRefresh();
    }
    setTimeout(() => setIsRefreshing(false), 2000);
  };

  const getMarketHealthColor = (health: string | null) => {
    switch (health) {
      case 'excellent': return 'text-green-500 bg-green-500/10';
      case 'good': return 'text-blue-500 bg-blue-500/10';
      case 'fair': return 'text-yellow-500 bg-yellow-500/10';
      case 'poor': return 'text-red-500 bg-red-500/10';
      default: return 'text-gray-500 bg-gray-500/10';
    }
  };

  const getMetricValue = (metricKey: string, metricData: any) => {
    const value = metricData[metricKey];
    if (value === null || value === undefined) return 'N/A';
    
    const config = [...velocityMetricsConfig, ...efficiencyMetricsConfig].find(m => m.key === metricKey);
    if (!config) return formatNumber(value);
    
    switch (config.format) {
      case 'currency':
        return formatCurrency(value);
      case 'percentage':
        return formatPercentage(value);
      case 'ratio':
        return value.toFixed(4);
      case 'score':
        return `${Math.round(value)}${config.unit}`;
      case 'days':
        return `${Math.round(value)}${config.unit}`;
      default:
        return formatNumber(value);
    }
  };

  if (isLoading && !data) {
    return (
      <section className="space-y-4">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-xl font-semibold">Advanced TVL Metrics</h2>
            <p className="text-sm text-muted-foreground">
              TVL Velocity & Efficiency analysis for {blockchain}
            </p>
          </div>
          <LoadingState text="Loading advanced metrics..." />
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {[...Array(6)].map((_, i) => (
            <Card key={i} className="animate-pulse">
              <CardHeader className="pb-2">
                <div className="h-4 bg-muted rounded w-3/4"></div>
              </CardHeader>
              <CardContent>
                <div className="h-8 bg-muted rounded w-1/2 mb-2"></div>
                <div className="h-4 bg-muted rounded w-full"></div>
              </CardContent>
            </Card>
          ))}
        </div>
      </section>
    );
  }

  if (!data) {
    return (
      <section className="space-y-4">
        <div>
          <h2 className="text-xl font-semibold">Advanced TVL Metrics</h2>
          <p className="text-sm text-muted-foreground">
            TVL Velocity & Efficiency analysis for {blockchain}
          </p>
        </div>
        <Card>
          <CardContent className="flex items-center justify-center py-8">
            <div className="text-center">
              <AlertTriangle className="h-12 w-12 text-yellow-500 mx-auto mb-4" />
              <div className="text-yellow-500 mb-2">No advanced data available</div>
              <p className="text-muted-foreground mb-4">
                Unable to load advanced TVL metrics for {blockchain}
              </p>
              <Button onClick={handleRefresh} disabled={isRefreshing}>
                <RefreshCw className={cn("h-4 w-4 mr-2", isRefreshing && "animate-spin")} />
                Try Again
              </Button>
            </div>
          </CardContent>
        </Card>
      </section>
    );
  }

  return (
    <section className="space-y-4">
      {/* Section Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-xl font-semibold">Advanced TVL Metrics</h2>
          <p className="text-sm text-muted-foreground">
            TVL Velocity & Efficiency analysis for {blockchain} â€¢ {timeframe}
          </p>
        </div>
        <div className="flex items-center space-x-2">
          <Badge 
            variant={data.is_outdated ? "destructive" : "default"}
            className={cn(
              "text-xs",
              !data.is_outdated && "bg-green-500 text-white"
            )}
          >
            {data.is_outdated ? "Data Outdated" : "Data Fresh"}
          </Badge>
          <Badge variant="outline" className="text-xs">
            Confidence: {Math.round(data.confidence * 100)}%
          </Badge>
          <Button 
            variant="outline" 
            size="sm" 
            onClick={handleRefresh}
            disabled={isRefreshing}
          >
            <RefreshCw className={cn("h-4 w-4", isRefreshing && "animate-spin")} />
          </Button>
        </div>
      </div>

      {/* Market Health Overview */}
      <Card className="bg-gradient-to-r from-blue-500/10 to-purple-500/10 border-blue-500/20">
        <CardContent className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
            <div className="text-center">
              <div className="text-sm text-muted-foreground mb-2">Market Health</div>
              <Badge className={cn("text-sm px-3 py-1", getMarketHealthColor(data.marketHealth))}>
                {data.marketHealth?.toUpperCase() || 'UNKNOWN'}
              </Badge>
            </div>
            <div className="text-center">
              <div className="text-sm text-muted-foreground mb-2">Combined Score</div>
              <div className="text-2xl font-bold">
                {data.combinedScore !== null ? Math.round(data.combinedScore) : 'N/A'}
                <span className="text-sm text-muted-foreground">/100</span>
              </div>
            </div>
            <div className="text-center">
              <div className="text-sm text-muted-foreground mb-2">Velocity Score</div>
              <div className="text-lg font-semibold text-blue-500">
                {data.tvlVelocity.liquidityEfficiency !== null ? Math.round(data.tvlVelocity.liquidityEfficiency) : 'N/A'}
                <span className="text-sm text-muted-foreground">/100</span>
              </div>
            </div>
            <div className="text-center">
              <div className="text-sm text-muted-foreground mb-2">Efficiency Score</div>
              <div className="text-lg font-semibold text-purple-500">
                {data.tvlEfficiency.capitalEfficiency !== null ? Math.round(data.tvlEfficiency.capitalEfficiency) : 'N/A'}
                <span className="text-sm text-muted-foreground">/100</span>
              </div>
            </div>
          </div>
          
          {/* Combined Score Progress */}
          {data.combinedScore !== null && (
            <div className="mt-4">
              <div className="flex justify-between text-sm mb-2">
                <span>Overall Performance</span>
                <span>{Math.round(data.combinedScore)}/100</span>
              </div>
              <Progress value={data.combinedScore} className="h-2" />
            </div>
          )}
        </CardContent>
      </Card>

      {/* Main Content */}
      <Tabs value={selectedTab} onValueChange={setSelectedTab} className="space-y-4">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="velocity">TVL Velocity</TabsTrigger>
          <TabsTrigger value="efficiency">TVL Efficiency</TabsTrigger>
          <TabsTrigger value="recommendations">Insights</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {/* TVL Velocity Summary */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Zap className="h-5 w-5 text-blue-500" />
                  <span>TVL Velocity</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {velocityMetricsConfig.slice(0, 3).map((metric) => (
                    <div key={metric.key} className="flex justify-between items-center">
                      <div className="text-sm text-muted-foreground">{metric.title}</div>
                      <div className="font-semibold">
                        {getMetricValue(metric.key, data.tvlVelocity)}
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* TVL Efficiency Summary */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Target className="h-5 w-5 text-purple-500" />
                  <span>TVL Efficiency</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {efficiencyMetricsConfig.slice(0, 3).map((metric) => (
                    <div key={metric.key} className="flex justify-between items-center">
                      <div className="text-sm text-muted-foreground">{metric.title}</div>
                      <div className="font-semibold">
                        {getMetricValue(metric.key, data.tvlEfficiency)}
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Key Metrics */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Activity className="h-5 w-5 text-green-500" />
                  <span>Key Metrics</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <div className="text-sm text-muted-foreground">Holding Period</div>
                    <div className="font-semibold">
                      {data.tvlVelocity.avgHoldingPeriod !== null ? 
                        `${Math.round(data.tvlVelocity.avgHoldingPeriod)} days` : 'N/A'}
                    </div>
                  </div>
                  <div className="flex justify-between items-center">
                    <div className="text-sm text-muted-foreground">ROI</div>
                    <div className="font-semibold">
                      {data.tvlEfficiency.roi !== null ? 
                        `${Math.round(data.tvlEfficiency.roi)}%` : 'N/A'}
                    </div>
                  </div>
                  <div className="flex justify-between items-center">
                    <div className="text-sm text-muted-foreground">Economic Output</div>
                    <div className="font-semibold">
                      {data.tvlEfficiency.economicOutput !== null ? 
                        formatCurrency(data.tvlEfficiency.economicOutput) : 'N/A'}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="velocity" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {velocityMetricsConfig.map((metric) => {
              const value = data.tvlVelocity[metric.key as keyof typeof data.tvlVelocity];
              const displayValue = getMetricValue(metric.key, data.tvlVelocity);
              
              return (
                <Card key={metric.key}>
                  <CardHeader className="pb-2">
                    <div className="flex items-center justify-between">
                      <metric.icon className={cn("h-5 w-5", metric.color)} />
                      <Badge variant="outline" className="text-xs">
                        {metric.tooltip}
                      </Badge>
                    </div>
                    <CardTitle className="text-sm">{metric.title}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold mb-1">
                      {displayValue}
                    </div>
                    <p className="text-xs text-muted-foreground">
                      {metric.description}
                    </p>
                    {value !== null && metric.format === 'score' && (
                      <Progress value={value as number} className="mt-2 h-2" />
                    )}
                  </CardContent>
                </Card>
              );
            })}
          </div>
        </TabsContent>

        <TabsContent value="efficiency" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {efficiencyMetricsConfig.map((metric) => {
              const value = data.tvlEfficiency[metric.key as keyof typeof data.tvlEfficiency];
              const displayValue = getMetricValue(metric.key, data.tvlEfficiency);
              
              return (
                <Card key={metric.key}>
                  <CardHeader className="pb-2">
                    <div className="flex items-center justify-between">
                      <metric.icon className={cn("h-5 w-5", metric.color)} />
                      <Badge variant="outline" className="text-xs">
                        {metric.tooltip}
                      </Badge>
                    </div>
                    <CardTitle className="text-sm">{metric.title}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold mb-1">
                      {displayValue}
                    </div>
                    <p className="text-xs text-muted-foreground">
                      {metric.description}
                    </p>
                    {value !== null && (metric.format === 'score' || metric.format === 'percentage') && (
                      <Progress 
                        value={metric.format === 'percentage' ? Math.min(value as number, 100) : value as number} 
                        className="mt-2 h-2" 
                      />
                    )}
                  </CardContent>
                </Card>
              );
            })}
          </div>
        </TabsContent>

        <TabsContent value="recommendations" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <CheckCircle className="h-5 w-5 text-green-500" />
                <span>AI Recommendations</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              {data.recommendations.length > 0 ? (
                <div className="space-y-3">
                  {data.recommendations.map((recommendation, index) => (
                    <div key={index} className="flex items-start space-x-3 p-3 bg-muted/50 rounded-lg">
                      <CheckCircle className="h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" />
                      <div className="text-sm">{recommendation}</div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8">
                  <CheckCircle className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <div className="text-gray-500">No specific recommendations at this time</div>
                  <div className="text-sm text-muted-foreground">
                    System is performing optimally
                  </div>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Market Analysis */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <BarChart3 className="h-5 w-5 text-blue-500" />
                <span>Market Analysis</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="font-semibold mb-3">Velocity Analysis</h4>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span>Circulation Speed:</span>
                      <span className="font-medium">
                        {data.tvlVelocity.velocity !== null ? 
                          `${data.tvlVelocity.velocity.toFixed(2)}x` : 'N/A'}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span>Capital Activity:</span>
                      <span className="font-medium">
                        {data.tvlVelocity.turnoverRate !== null ? 
                          `${data.tvlVelocity.turnoverRate.toFixed(2)}%` : 'N/A'}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span>Liquidity Health:</span>
                      <span className="font-medium">
                        {data.tvlVelocity.liquidityEfficiency !== null ? 
                          `${Math.round(data.tvlVelocity.liquidityEfficiency)}/100` : 'N/A'}
                      </span>
                    </div>
                  </div>
                </div>
                
                <div>
                  <h4 className="font-semibold mb-3">Efficiency Analysis</h4>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span>Revenue Generation:</span>
                      <span className="font-medium">
                        {data.tvlEfficiency.revenueToTVLRatio !== null ? 
                          `${data.tvlEfficiency.revenueToTVLRatio.toFixed(2)}%` : 'N/A'}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span>Capital Efficiency:</span>
                      <span className="font-medium">
                        {data.tvlEfficiency.capitalEfficiency !== null ? 
                          `${Math.round(data.tvlEfficiency.capitalEfficiency)}/100` : 'N/A'}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span>Yield Potential:</span>
                      <span className="font-medium">
                        {data.tvlEfficiency.protocolYield !== null ? 
                          `${data.tvlEfficiency.protocolYield.toFixed(2)}%` : 'N/A'}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </section>
  );
}